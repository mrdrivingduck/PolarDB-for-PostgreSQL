import{_ as u,M as t,p,q as h,N as l,R as e,t as a,V as s,a1 as r}from"./framework-de73eade.js";const b={},_=e("h1",{id:"基于单机文件系统部署",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基于单机文件系统部署","aria-hidden":"true"},"#"),a(" 基于单机文件系统部署")],-1),g=e("p",null,"本文将指导您在单机文件系统（如 ext4）上编译部署 PolarDB，适用于所有计算节点都可以访问相同本地磁盘存储的场景。",-1),m={href:"https://hub.docker.com/r/polardb/polardb_pg_devel/tags",target:"_blank",rel:"noopener noreferrer"},v=r(`<h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备" aria-hidden="true">#</a> 环境准备</h2><p>拉取开发镜像，创建并进入容器：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull polardb/polardb_pg_devel
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    --cap-add<span class="token operator">=</span>SYS_PTRACE <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> polardb_pg <span class="token punctuation">\\</span>
    polardb/polardb_pg_devel <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),f={href:"https://github.com/ApsaraDB/PolarDB-for-PostgreSQL",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"POLARDB_11_STABLE",-1),x={href:"https://gitee.com/mirrors/PolarDB-for-PostgreSQL",target:"_blank",rel:"noopener noreferrer"},P=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"git"),a(" clone "),e("span",{class:"token parameter variable"},"-b"),a(` POLARDB_11_STABLE https://github.com/ApsaraDB/PolarDB-for-PostgreSQL.git
`)])])],-1),B=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"git"),a(" clone "),e("span",{class:"token parameter variable"},"-b"),a(` POLARDB_11_STABLE https://gitee.com/mirrors/PolarDB-for-PostgreSQL
`)])])],-1),D=r(`<p>代码克隆完毕后，进入源码目录：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> PolarDB-for-PostgreSQL/
</code></pre></div><h2 id="编译测试选项说明" tabindex="-1"><a class="header-anchor" href="#编译测试选项说明" aria-hidden="true">#</a> 编译测试选项说明</h2><p>以下表格列出了编译、初始化或测试 PolarDB 集群所可能使用到的选项及说明。更多选项及其说明详见源码目录下的 <code>polardb_build.sh</code> 脚本。</p>`,4),A=e("thead",null,[e("tr",null,[e("th",null,"选项"),e("th",null,"描述"),e("th",null,"默认值")])],-1),N=e("tr",null,[e("td",null,[e("code",null,"--withrep")]),e("td",null,"是否初始化只读节点"),e("td",null,[e("code",null,"NO")])],-1),L=e("tr",null,[e("td",null,[e("code",null,"--repnum")]),e("td",null,"只读节点数量"),e("td",null,[e("code",null,"1")])],-1),O=e("tr",null,[e("td",null,[e("code",null,"--withstandby")]),e("td",null,"是否初始化热备份节点"),e("td",null,[e("code",null,"NO")])],-1),S=e("tr",null,[e("td",null,[e("code",null,"--initpx")]),e("td",null,"是否初始化为 HTAP 集群（1 个读写节点，2 个只读节点）"),e("td",null,[e("code",null,"NO")])],-1),w=e("tr",null,[e("td",null,[e("code",null,"--with-pfsd")]),e("td",null,"是否编译 PolarDB File System（PFS）相关功能"),e("td",null,[e("code",null,"NO")])],-1),T=e("td",null,[e("code",null,"--with-tde")],-1),G={href:"https://zhuanlan.zhihu.com/p/84829027",target:"_blank",rel:"noopener noreferrer"},C=e("td",null,[e("code",null,"NO")],-1),E=e("tr",null,[e("td",null,[e("code",null,"--with-dma")]),e("td",null,"是否初始化为 DMA（Data Max Availability）高可用三节点集群"),e("td",null,[e("code",null,"NO")])],-1),H=e("tr",null,[e("td",null,[e("code",null,"-r"),a("/ "),e("code",null,"-t"),a(" / "),e("br"),e("code",null,"--regress")]),e("td",null,"在编译安装完毕后运行内核回归测试"),e("td",null,[e("code",null,"NO")])],-1),Q=e("tr",null,[e("td",null,[e("code",null,"-r-px")]),e("td",null,"运行 HTAP 实例的回归测试"),e("td",null,[e("code",null,"NO")])],-1),I=e("tr",null,[e("td",null,[e("code",null,"-e"),a(" /"),e("br"),e("code",null,"--extension")]),e("td",null,"运行扩展插件测试"),e("td",null,[e("code",null,"NO")])],-1),M=e("tr",null,[e("td",null,[e("code",null,"-r-external")]),e("td",null,[a("测试 "),e("code",null,"external/"),a(" 下的扩展插件")]),e("td",null,[e("code",null,"NO")])],-1),R=e("tr",null,[e("td",null,[e("code",null,"-r-contrib")]),e("td",null,[a("测试 "),e("code",null,"contrib/"),a(" 下的扩展插件")]),e("td",null,[e("code",null,"NO")])],-1),y=e("tr",null,[e("td",null,[e("code",null,"-r-pl")]),e("td",null,[a("测试 "),e("code",null,"src/pl/"),a(" 下的扩展插件")]),e("td",null,[e("code",null,"NO")])],-1),V=r(`<p>如无定制的需求，则可以按照下面给出的选项编译部署不同形态的 PolarDB 集群并进行测试。</p><h2 id="polardb-各形态编译部署" tabindex="-1"><a class="header-anchor" href="#polardb-各形态编译部署" aria-hidden="true">#</a> PolarDB 各形态编译部署</h2><h3 id="本地单节点实例" tabindex="-1"><a class="header-anchor" href="#本地单节点实例" aria-hidden="true">#</a> 本地单节点实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh
</code></pre></div><h3 id="本地多节点实例" tabindex="-1"><a class="header-anchor" href="#本地多节点实例" aria-hidden="true">#</a> 本地多节点实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li><li>1 个只读节点（运行于 <code>5433</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--withrep</span> <span class="token parameter variable">--repnum</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre></div><h3 id="本地多节点带备库实例" tabindex="-1"><a class="header-anchor" href="#本地多节点带备库实例" aria-hidden="true">#</a> 本地多节点带备库实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li><li>1 个只读节点（运行于 <code>5433</code> 端口）</li><li>1 个备库节点（运行于 <code>5434</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--withrep</span> <span class="token parameter variable">--repnum</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--withstandby</span>
</code></pre></div><h3 id="本地多节点-htap-实例" tabindex="-1"><a class="header-anchor" href="#本地多节点-htap-实例" aria-hidden="true">#</a> 本地多节点 HTAP 实例</h3><ul><li>1 个读写节点（运行于 <code>5432</code> 端口）</li><li>2 个只读节点（运行于 <code>5433</code> / <code>5434</code> 端口）</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--initpx</span>
</code></pre></div><h2 id="实例回归测试" tabindex="-1"><a class="header-anchor" href="#实例回归测试" aria-hidden="true">#</a> 实例回归测试</h2><p>普通实例回归测试：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">--withrep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-e</span> -r-external -r-contrib -r-pl --with-tde
</code></pre></div><p>HTAP 实例回归测试：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh -r-px <span class="token parameter variable">-e</span> -r-external -r-contrib -r-pl --with-tde
</code></pre></div><p>DMA 实例回归测试：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>./polardb_build.sh <span class="token parameter variable">-r</span> <span class="token parameter variable">-e</span> -r-external -r-contrib -r-pl --with-tde --with-dma
</code></pre></div>`,21);function z(d,F){const c=t("ArticleInfo"),n=t("ExternalLinkIcon"),o=t("CodeGroupItem"),i=t("CodeGroup");return p(),h("div",null,[_,l(c,{frontmatter:d.$frontmatter},null,8,["frontmatter"]),g,e("p",null,[a("我们在 DockerHub 上提供了一个 "),e("a",m,[a("PolarDB 开发镜像"),l(n)]),a("，里面已经包含编译运行 PolarDB for PostgreSQL 所需要的所有依赖。您可以直接使用这个开发镜像进行实例搭建。镜像目前支持 AMD64 和 ARM64 两种 CPU 架构。")]),v,e("p",null,[a("进入容器后，从 "),e("a",f,[a("GitHub"),l(n)]),a(" 上下载 PolarDB for PostgreSQL 的源代码，稳定分支为 "),k,a("。如果因网络原因不能稳定访问 GitHub，则可以访问 "),e("a",x,[a("Gitee 国内镜像"),l(n)]),a("。")]),l(i,null,{default:s(()=>[l(o,{title:"GitHub"},{default:s(()=>[P]),_:1}),l(o,{title:"Gitee 国内镜像"},{default:s(()=>[B]),_:1})]),_:1}),D,e("table",null,[A,e("tbody",null,[N,L,O,S,w,e("tr",null,[T,e("td",null,[a("是否初始化 "),e("a",G,[a("透明数据加密（TDE）"),l(n)]),a(" 功能")]),C]),E,H,Q,I,M,R,y])]),V])}const U=u(b,[["render",z],["__file","db-localfs.html.vue"]]);export{U as default};
